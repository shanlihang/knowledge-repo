import{_ as s,c as a,o as e,ag as n}from"./chunks/framework.Ii2o3pk_.js";const c=JSON.parse('{"title":"Minio 对象存储使用手册","description":"","frontmatter":{},"headers":[],"relativePath":"tools/oss/minio.md","filePath":"tools/oss/minio.md"}'),l={name:"tools/oss/minio.md"};function t(h,i,o,p,k,r){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="minio-对象存储使用手册" tabindex="-1">Minio 对象存储使用手册 <a class="header-anchor" href="#minio-对象存储使用手册" aria-label="Permalink to &quot;Minio 对象存储使用手册&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><h3 id="什么是-minio" tabindex="-1">什么是 Minio <a class="header-anchor" href="#什么是-minio" aria-label="Permalink to &quot;什么是 Minio&quot;">​</a></h3><p>MinIO 是一个高性能的对象存储系统，兼容 Amazon S3 接口，支持大文件存储、图片视频上传、分布式部署等，是做私有云、AI 数据湖、文件服务的利器。</p><h3 id="什么是对象存储" tabindex="-1">什么是对象存储 <a class="header-anchor" href="#什么是对象存储" aria-label="Permalink to &quot;什么是对象存储&quot;">​</a></h3><p>对象存储（Object Storage）是一种将数据以“对象”的形式进行管理的存储方式，每个对象由以下组成：</p><ul><li>文件本身的数据（Data）</li><li>一组元数据（Metadata）</li><li>唯一的对象标识符（Object Name / Key）</li></ul><p>对象存储不像传统文件系统那样用“文件夹”组织文件，而是用“桶”（Bucket）和对象名模拟出类似目录结构。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用户头像存储</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bucket:avatars,key:user001.png</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 项目文档资料存储</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bucket:project-docs,key:20250626/proposal.pdf</span></span></code></pre></div><h3 id="核心概念解释" tabindex="-1">核心概念解释 <a class="header-anchor" href="#核心概念解释" aria-label="Permalink to &quot;核心概念解释&quot;">​</a></h3><h4 id="bucket-桶" tabindex="-1">Bucket（桶） <a class="header-anchor" href="#bucket-桶" aria-label="Permalink to &quot;Bucket（桶）&quot;">​</a></h4><ul><li>桶是对象存储中的 <code>命名空间</code> ，类似于文件系统中的目录</li><li>每个桶名在整个 MinIO 实例中必须是唯一的</li><li>所有对象都必须被存放在某个桶中</li></ul><h4 id="object-对象" tabindex="-1">Object（对象） <a class="header-anchor" href="#object-对象" aria-label="Permalink to &quot;Object（对象）&quot;">​</a></h4><ul><li>存储在桶中的每个文件称为 <code>对象</code></li><li>包括数据内容、元信息（如文件类型、大小、时间戳等）和对象名（即文件名）</li><li>每个对象都有一个唯一的名字，用于在桶中定位</li></ul><h4 id="用户凭证" tabindex="-1">用户凭证 <a class="header-anchor" href="#用户凭证" aria-label="Permalink to &quot;用户凭证&quot;">​</a></h4><ul><li><code>Access Key</code> 即 <code>MINIO_ROOT_USER</code>，可理解为用户名</li><li><code>Secret Key</code> 即 <code>MINIO_ROOT_PASSWORD</code>，可理解为密码</li></ul><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><h3 id="windows" tabindex="-1">windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;windows&quot;">​</a></h3><ol><li>访问 <a href="https://min.io/open-source/download?platform=windows" target="_blank" rel="noreferrer">下载地址</a></li><li>选择 <code>MinIO Server</code></li><li>点击 <code>DOWNLOAD</code></li><li>服务启动</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">minio.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nvironment</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">inio</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ata</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --console-address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:9001&quot;</span></span></code></pre></div><h3 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h3><ol><li>拉取 <code>minio</code> 镜像</li><li>运行容器</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minio</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MINIO_ROOT_USER=root&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MINIO_ROOT_PASSWORD=67490009&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /Users/shanlihang/environment/minio:/data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9000:9000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9001:9001</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  minio/minio</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --console-address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:9001&quot;</span></span></code></pre></div>`,23)]))}const F=s(l,[["render",t]]);export{c as __pageData,F as default};
