import{_ as d,c as e,o as r,ag as a}from"./chunks/framework.Bv6InF5B.js";const u=JSON.parse('{"title":"typewriter 打字机效果","description":"","frontmatter":{},"headers":[],"relativePath":"web/typewriter.md","filePath":"web/typewriter.md"}'),o={name:"web/typewriter.md"};function l(i,t,s,n,h,p){return r(),e("div",null,t[0]||(t[0]=[a('<h1 id="typewriter-打字机效果" tabindex="-1">typewriter 打字机效果 <a class="header-anchor" href="#typewriter-打字机效果" aria-label="Permalink to &quot;typewriter 打字机效果&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><ul><li>typewriter：通过逐字逐行的方式模拟文本的输入</li><li>通常用于页面的欢迎信息、广告标语、博客标题等，能够增强用户的互动体验</li></ul><h2 id="配置项" tabindex="-1">配置项 <a class="header-anchor" href="#配置项" aria-label="Permalink to &quot;配置项&quot;">​</a></h2><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>strings</td><td>字符串或数组</td><td>null</td><td>使用 <code>autoStart</code> 选项时输入的内容</td></tr><tr><td>cursor</td><td>字符串</td><td>管道字符</td><td>用作光标的字符串值</td></tr><tr><td>delay</td><td>自然数或数值</td><td>自然数</td><td>打字时每个字的延迟</td></tr><tr><td>deleteSpeed</td><td>自然数或数值</td><td>自然数</td><td>删除时每个字的延迟</td></tr><tr><td>loop</td><td>布尔</td><td>false</td><td>是否继续循环</td></tr><tr><td>autoStart</td><td>布尔</td><td>false</td><td>是否自动开始播放，需填写<code>strings</code>配置项</td></tr><tr><td>pauseFor</td><td>数值</td><td>1500</td><td>使用自动启动模式时键入字符串后的暂停持续时间</td></tr><tr><td>devMode</td><td>布尔</td><td>false</td><td>是否显示控制台日志</td></tr><tr><td>skipAddStyles</td><td>布尔</td><td>false</td><td>跳过添加默认打字机 css 样式</td></tr><tr><td>wrapperClassName</td><td>字符串</td><td>Typewriter__wrapper</td><td>包装元素的类名</td></tr><tr><td>cursorClassName</td><td>字符串</td><td>Typewriter__cursor</td><td>光标元素的类名</td></tr><tr><td>stringSplitter</td><td>函数</td><td>-</td><td>字符串拆分器功能，可用于拆分 emoji</td></tr><tr><td>onCreateTextNode</td><td>函数</td><td>null</td><td>回调函数，用于替换在将字符添加到 DOM 之前为字符创建文本节点的内部方法。如果你返回 null，那么它不会向 DOM 添加任何内容，因此由你来处理它</td></tr><tr><td>onRemoveNode</td><td>函数</td><td>null</td><td>即将删除节点时的回调函数。第一个参数将是一个对象<code>{ node: HTMLNode, charater: string}</code></td></tr></tbody></table><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><blockquote><p>所有方法都可以链接在一起</p></blockquote><table tabindex="0"><thead><tr><th>参数</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>-</td><td>启动打字机效果</td></tr><tr><td>stop</td><td>-</td><td>停止打字机效果</td></tr><tr><td>pauseFor</td><td>暂停时间(数值或自然数)</td><td>暂停打字（暂停时间以<code>ms</code>为单位）</td></tr><tr><td>typeString</td><td>输入字符串(支持 HTML)</td><td>使用 typewriter 效果键入字符串</td></tr><tr><td>pasteString</td><td>粘贴字符串(支持 HTML)</td><td>粘贴字符串</td></tr><tr><td>deleteAll</td><td>删除速度(数值或自然数)</td><td>删除所有内容</td></tr><tr><td>deleteChars</td><td>字符数(数值)</td><td>从末尾删除指定的字符</td></tr><tr><td>changeDeleteSpeed</td><td>速度(数值或自然数)</td><td>删除字符的速度，数字越小越快</td></tr><tr><td>changeDelay</td><td>延迟时间(数值或自然数)</td><td>更改键入每个字符时的延迟</td></tr></tbody></table>',8)]))}const _=d(o,[["render",l]]);export{u as __pageData,_ as default};
